install(neuralnet)
library(neuralnet)
library("nnet", lib.loc="C:/Program Files/R/R-3.0.2/library")
help(nnet)
install.packages('neuralnet')
library("neuralnet")
valid <- read.csv("Y:/2014/Kaggle/Connectomics/valid.tar", header=F)
View(valid)
Train = valid[2,180500]
Train = valid(2:)
Train = valid[2,:]
Train<-valid[2:180500]
Train<-valid[2:180500,:]
remove(Train)
Train<-valid[,]
Train = Train[-1]
Train<-valid[,]
Train = Train[-1,]
View(Train)
remove(valid)
Train = Train[-1]
View(Train)
View(Train)
remove(Train)
require(ISLR)
require(boot)
?cv.glm
plot(mpg~horsepower,data=Auto)
## LOOCV
glm.fit=glm(mpg~horsepower, data=Auto)
cv.glm(Auto,glm.fit)$delta #pretty slow (doesnt use formula (5.2) on page 180)
##Lets write a simple function to use formula (5.2)
loocv=function(fit){
h=lm.influence(fit)$h
mean((residuals(fit)/(1-h))^2)
}
## Now we try it out
loocv(glm.fit)
cv.error=rep(0,5)
degree=1:5
for(d in degree){
glm.fit=glm(mpg~poly(horsepower,d), data=Auto)
cv.error[d]=loocv(glm.fit)
}
plot(degree,cv.error,type="b")
## 10-fold CV
cv.error10=rep(0,5)
for(d in degree){
glm.fit=glm(mpg~poly(horsepower,d), data=Auto)
cv.error10[d]=cv.glm(Auto,glm.fit,K=10)$delta[1]
}
lines(degree,cv.error10,type="b",col="red")
## Bootstrap
## Minimum risk investment - Section 5.2
alpha=function(x,y){
vx=var(x)
vy=var(y)
cxy=cov(x,y)
(vy-cxy)/(vx+vy-2*cxy)
}
alpha(Portfolio$X,Portfolio$Y)
## What is the standard error of alpha?
alpha.fn=function(data, index){
with(data[index,],alpha(X,Y))
}
alpha.fn(Portfolio,1:100)
set.seed(1)
alpha.fn (Portfolio,sample(1:100,100,replace=TRUE))
boot.out=boot(Portfolio,alpha.fn,R=1000)
boot.out
plot(boot.out)
package.install("knitr")
install.packages("knitr")
================
This is an R Markdown document. Markdown is a simple formatting syntax for authoring web pages,
and a very nice way of distributing an analysis. It has some very simple syntax rules.
```{r}
library(ISLR)
summary(Hitters)
```
There are some missing values here, so before we proceed we will remove them:
```{r}
Hitters=na.omit(Hitters)
with(Hitters,sum(is.na(Salary)))
```
Best Subset regression
------------------------
We will now use the package `leaps` to evaluate all the best-subset models.
```{r}
library(leaps)
regfit.full=regsubsets(Salary~.,data=Hitters)
summary(regfit.full)
```
It gives by default best-subsets up to size 8; lets increase that to 19, i.e. all the variables
```{r}
regfit.full=regsubsets(Salary~.,data=Hitters, nvmax=19)
reg.summary=summary(regfit.full)
names(reg.summary)
plot(reg.summary$cp,xlab="Number of Variables",ylab="Cp")
which.min(reg.summary$cp)
points(10,reg.summary$cp[10],pch=20,col="red")
```
There is a plot method for the `regsubsets`  object
```{r}
plot(regfit.full,scale="Cp")
coef(regfit.full,10)
```
Forward Stepwise Selection
--------------------------
Here we use the `regsubsets` function but specify the `method="forward" option:
```{r}
regfit.fwd=regsubsets(Salary~.,data=Hitters,nvmax=19,method="forward")
summary(regfit.fwd)
plot(regfit.fwd,scale="Cp")
```
Model Selection Using a Validation Set
---------------------------------------
Lets make a training and validation set, so that we can choose a good subset model.
We will do it using a slightly different approach from what was done in the the book.
```{r}
install.packages('leaps')
install.packages('glmnet')
install.packages('e1071')
install.packages('tree')
install.packages('randomForest')
install.packages('gbm')
package.install("Quandl")
install.package("Quandl")
install.packages('Quandl')
library(Quandl)
Quandl.auth("zbXCJYo1kvuCm9pgYQMR")
us_compare=Quandl("JOE_SIEBER/7N4",start_date="1994-12-31",end_date="2012-12-13")
us_compare
us_compare=Quandl("http://www.quandl.com/JOE_SIEBER/7N6",start_date="1994-12-31",end_date="2012-12-13")
us_compare=Quandl(JOE_SIEBER/7N6",start_date="1994-12-31",end_date="2012-12-13")
us_compare=Quandl("JOE_SIEBER/7N6",start_date="1994-12-31",end_date="2012-12-13")
us_compare
us_compare<-us_compare[!is.na(us_compare)]
us_compare
us_compare=Quandl("JOE_SIEBER/7N6",start_date="1994-12-31",end_date="2012-12-13")
View(us_compare)
us_compare<-us_compare[!is.na(us_compare)]
us_compare=Quandl("JOE_SIEBER/7N6",start_date="1994-12-31",end_date="2012-12-13")
us_compare[!complete.cases(us_compare),]
newdata<-na.omit(mydata)
newdata<-na.omit(us_compare)
newdata
us_compare<-newdata
attach(us_compare)
plot(unemployment,growth)
us_compare<-lm(growth-unemployment, data=us_compare)
us_trend<-lm(growth-unemployment, data=us_compare)
us_trend<-lm(growth~unemployment, data=us_compare)
abline(us_trend)
summary(us_trend)
us_compare=Quandl("JOE_SIEBER/7N8",start_date="1994-12-31",end_date="2013-12-13")
spx=Quandl("JOE_SIEBER/7N8",start_date="1994-12-31",end_date="2013-12-13")
remove(newdata)
pairs(spx)
spx[spxdelta]<-NA
spx["spxdelta"]<-NA
spx$spxdelta<-spx$adjclose - spx$adjclose[-1]
spx$spxdelta<-spx$adjclose[2,] - spx$adjclose[-1]
spx$spxdelta<-spx$adjclose[2,] - spx$adjclose[1,]
spx$spxdelta<-spx$adjclose[2,4938] - spx$adjclose[1,4937]
View(spx)
pairs(spx)
install.packages("swirl")
library(swirl)
swirl()
5+7
x<-5+7
x
y<-x-3
y
z<-c(1.1,9,3.14)
?c
z
c(z,555,z)
z*2+100
mySqrt<-sqrt(z-1)
mySqrt
myDiv<-z/mySqrt
myDiv
c(1,2,3,4)+c(0,10)
c(1, 2, 3, 4) + c(0, 10, 100)
5+7
x<-5+7
x
y<-x-3
y
z<-c(1.1, 9, 3.14)
?c
z
c(z,555,z)
z * 2 + 100
mySqrt<-sqrt(z-1)
mySqrt
myDiv<-z/mySqrt
myDiv
c(1,2, 3, 4) +c(0, 10)
c(1, 2, 3, 4) + c(0, 10, 100)
library(swirl)
swirl()
5+7
x<-5+7
x
y<-x-3
y
z<-c(1.1, 9, 3.14)
?c
z
c(z,555,z)
z * 2 + 100
mySqrt<-sqrt(z-1)
mySqrt
myDiv<-z/mySqrt
myDiv
c(1,2, 3, 4) +c(0, 10)
c(1, 2, 3, 4) + c(0, 10, 100)
1:20
pi:20
pi:10
15:1
`:
)
`
?:
?`:`
seq(1,20)
seq(0, 10,by=0.5)
my_seq<-seq(5, 10, length=30)
length(my_seq)
1:length(my_seq)
seq(along = my_seq)
seq_along(my_seq)
rep(0, times = 40)
rep(c(0, 1, 2), times = 10)
rep(c(0, 1, 2), each = 10)
num_vect<-c(0.5,55,-10,6)
tf<-num_vect<1
tf
num_vect >= 6
my_char<-c("My","name","is")
my_char
paste(my_char, collapse = " ")
c(my_char, "Joe")
my_name<-c(my_char, "Joe")
my_name
paste(my_name, collapse = " ")
paste("Hello", "world!", sep = " ")
paste(1:3,c("X","Y","Z"), sep = " ")
paste(1:3,c("X","Y","Z"), sep = "")
paste(LETTERS, 1:4, sep = "-")
x<-c(44, NA, 5, NA)
x*3
y<-rnorn(1000)
y<-rnorm(1000)
z<-rep(NA,1000)
myData <- sample(c(y, z),100)
myNa<-is.na(myData)
myNA<-is.na(myData)
myNA
myData==NA
sum(myNA)
myData
0/0
Inf-Inf
x
x[1:10]
x[is.na(x)]
y<-[!is.na(x)]
y<-x[!is.na(x)]
y
y[y>0]
x[x>0]
x[!is.na(x) & x > 0]
x[c(3,5,7)]
x[0]
x[3000]
x[c(-2, -10)]
x[-c(2, 10)]
vect <- c(foo = 11,bar = 2, norf = NA)
vect
names(vect)
vect2<-c(11,2,NA)
names(vect2) <- c("foo", "bar", "norf")
identical(vect,vect2)
vect["bar"]
vect[c("foo", "bar")]
myVector<-1:20
myVector
dim(myVector)
length(myVector)
dim(myVector)<-c(4,5)
dim(myVector)
attributes(myVector)
myVector
class(myVector)
myMatrix<-myVector
?matrix()
?matrix
myMatrix2<-matrix(1:20)
myMatrix2<-matrix(1:20,nrow=4,ncol=5)
identical(myMatrix,myMatrix2)
patients<-c("Bill", "Gina", "Kelly", "Sean")
cbind(patients,myMatrix)
myData <- data.frame(patients, myMatrix)
myData
class(myData)
cnames<-c("patient", "age", "weight", "bp", "rating", "test")
?colnames
colnames(myData)<-cnames
myData
exit
exit()
bye
source("http://d396qusza40orc.cloudfront.net/rprog%2Fscripts%2Fsubmitscript1.R")
submit
R.home()
R.home()
install.packages("RMySQL", type = "source")
x<-list(a=1:5, b=rnorm(10))
x
lapply(x,mean)
x<-list(a=matrix(1:4,2,2),b = matrix(1:6,3,2))
x
lapply(x,function(elt),elt[,1])
lapply(x,function(elt) elt[,1])
sapply(x,function(elt) elt[,1])
system.time()
system.time
system.time(readlines("http://www.jhsph.edu"))
system.time(readLines("http://www.jhsph.edu"))
system.time(readLines("http://www.jhsph.edu"))
system.time(readLines("http://www.jhsph.edu"))
system.time(readLines("http://www.jhsph.edu"))
system.time(readLines("http://www.jhsph.edu"))
hilbert<-function(n){}
hilbert<-function(n){}
hilbert<-function(n){}
hilbert<-function(n){
i<-1:n
1/outer(i-1,i,"+")}
x<-hilbert(1000)
system.time(svd(x))
system.time(svd(x))
Rprof()
?Rprof()
set.seed(1)
rpois(5,2)
rpois(5,2)
set.seed(1)
rpois(5,2)
?rnorm
set.seed(10)
x<-rbinom(10,10,0.5)
e<-rbinom(10,0,20)
y<-0.5+2*x+e
y
e
set.seed(10)
x <- rbinom(10, 10, 0.5)
e <- rnorm(10, 0, 20)
y <- 0.5 + 2 * x + e
y
e
y
library(datasets)
Rprof()
fit <- lm(y ~ x1 + x2)
Rprof(NULL)
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight)
?xyplot
library(lattice)
library(datasets)
data(airquality)
p <- xyplot(Ozone ~ Wind | factor(Month), data = airquality)
xyplot(Ozone ~ Wind | factor(Month), data = airquality)
?trellis.par.set
library(datasets)
data(airquality)
data(airquality)
qplot(Wind, Ozone, data = airquality, geom = "smooth")
library(ggplot2)
qplot(Wind, Ozone, data = airquality, geom = "smooth")
qplot(Wind, Ozone, data = airquality)
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
?geom
qplot(votes, rating, data = movies)
qplot(votes, rating, data = movies, smooth = "loess")
qplot(votes, rating, data = movies, panel = panel.loess)
qplot(votes, rating, data = movies) + geom_smooth()
qplot(votes, rating, data = movies) + stats_smooth("loess")
qplot(votes, rating, data = movies, smooth = "loess")
qplot(votes, rating, data = movies, panel = panel.loess)
qplot(votes, rating, data = movies) + geom_smooth()
install.packages("caret")
?caret
library(caret)
?caret
library(kernlab)
install.packages("kernlab")
data(spam)
inTrain<-createDataPartition(y=spam$type,p=0.75,list=FALSE)
data(spam)
data(Spam)
library(kernlab)
data(Spam)
data(spam)
inTrain<-createDataPartition(y=spam$type,p=0.75,list=FALSE)
library(doMC)
setwd("Y:/2014/Coursera/9. Developing Data Products/Project1")
shiny::runApp('CoverType')
library(shinyapps)
shinyapps::setAccountInfo(name='sieber', token='E1C12AE221F45908C92096C3CA46826F', secret='vzyUMZR42A84KL+kbeGZOfZ1vzho3e2wv8XDBPvP')
deployApp()
deployApp()
setwd("Y:/2014/Coursera/9. Developing Data Products/Project1/CoverType")
deployApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
setwd("Y:/2014/Coursera/9. Developing Data Products/Project1/CoverType")
shiny::runApp()
shiny::runApp()
shiny::runApp()
setwd("Y:/2014/Coursera/9. Developing Data Products/Project1/CoverType")
deployApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
setwd("Y:/2014/Coursera/9. Developing Data Products/Project1/CoverType/data")
ReadMe <- read.table("Y:/2014/Coursera/9. Developing Data Products/Project1/CoverType/data/ReadMe.txt", quote="\"", stringsAsFactors=FALSE)
View(ReadMe)
shiny::runApp('Y:/2014/Coursera/9. Developing Data Products/Project1/CoverType')
shiny::runApp('Y:/2014/Coursera/9. Developing Data Products/Project1/CoverType')
ReadMe <- read.table("Y:/2014/Coursera/9. Developing Data Products/Project1/CoverType/data/ReadMe.txt", quote="\"", stringsAsFactors=FALSE)
View(ReadMe)
ReadMe <- read.table("Y:/2014/Coursera/9. Developing Data Products/Project1/CoverType/data/ReadMe.txt", stringsAsFactors=FALSE)
shiny::runApp('Y:/2014/Coursera/9. Developing Data Products/Project1/CoverType')
shiny::runApp('Y:/2014/Coursera/9. Developing Data Products/Project1/CoverType')
shiny::runApp('Y:/2014/Coursera/9. Developing Data Products/Project1/CoverType')
shiny::runApp('Y:/2014/Coursera/9. Developing Data Products/Project1/CoverType')
setwd("Y:/2014/Coursera/9. Developing Data Products/Project1/CoverType")
deployApp()
shiny::runApp()
shiny::runApp()
deployApp()
shiny::runApp()
deployApp()
